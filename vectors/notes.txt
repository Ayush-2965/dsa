Vector os a array like structure but like array it don't have fixed length,its an array
with dynamic length

syntax ---- > vector<datatype> variableName

Ex- vector<int> vec;


vector functions ---->

size()      //returns size of the array

push_back() // (add or push element at the end of the array)
pop_back()  // (delete or pop element from the end of the array)

front()     // (return first element)
back()      //(return last element)

at()       // same a vec[i] (getting element at any particular index)

-----

looping through vector we use 'for each'  // it loops and take value at every index not the index like normal for loop

--syntax---> for ( type val : vec){}



----------------------------------------------

üß± Static Allocation
Memory is allocated at compile time.

Size must be known beforehand.

Automatically deallocated when out of scope.

-----------------------------------------------

‚öôÔ∏è Dynamic Allocation
Memory is allocated at runtime using new.

Size can be decided during execution.

Must be manually deallocated using delete.

---------------------------------------------

***vectors made dynamic allocation more efficient


---- Vectors vs Arrays ------>>

Feature                  | Static Array (int arr[10]) | Dynamic Array (new int[n])  | Vector (std::vector<int>)
-------------------------|----------------------------|-----------------------------|-----------------------------
Size fixed?              | Yes                        | No (decided at runtime)     | No (can grow/shrink)
Bounds checking          | No                         | No                          | Yes (at .at())
Memory deallocation      | Automatic                  | Manual (delete[])           | Automatic (RAII)
Built-in resizing        | ‚ùå                        | ‚ùå                          | ‚úÖ .resize(), .push_back()
STL integration          | ‚ùå                        | ‚ùå                          | ‚úÖ (part of C++ STL)